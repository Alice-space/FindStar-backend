"""
Django settings for star project.

Generated by 'django-admin startproject' using Django 3.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import sys
from configparser import RawConfigParser
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

CONFIG_DIR = BASE_DIR / 'config'
CONFIG = RawConfigParser()
CONFIG.read(CONFIG_DIR / 'config.ini', encoding='utf-8')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = CONFIG.get('DJANGO', 'SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = CONFIG.getboolean('DJANGO', 'DEBUG')

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "graphene_django",
    "apps.find_star",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "django.middleware.locale.LocaleMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'star.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'star.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASE_MAP = {
    'sqlite': 'django.db.backends.sqlite3',
    'mysql': 'django.db.backends.mysql',
    'postgresql': 'django.db.backends.postgresql_psycopg2',
    'oracle': 'django.db.backends.oracle',
}

if CONFIG['DATABASE']['engine'] == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': DATABASE_MAP[CONFIG['DATABASE']['ENGINE']],
            'NAME': BASE_DIR / 'db.sqlite3',
            'OPTIONS': {
                'timeout': 20,
            }
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': DATABASE_MAP[CONFIG['DATABASE']['ENGINE']],
            'NAME': CONFIG['DATABASE']['NAME'],
            'USER': CONFIG['DATABASE']['USER'],
            'PASSWORD': CONFIG['DATABASE']['PASSWORD'],
            'HOST': CONFIG['DATABASE']['HOST'],
            'PORT': CONFIG['DATABASE']['PORT'],
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "zh-Hans"

LANGUAGES = [
    ("zh-hans", "Simplified Chinese"),
    ("en", "English"),
]

LOCALE_PATHS = [
    BASE_DIR / "translation" / "locale",
    BASE_DIR / "translation" / "graphql_jwt",
    BASE_DIR / "translation" / "refresh_token",
]

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'assets'

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

ADMIN_URL = CONFIG.get("DJANGO", "ADMIN_URL")
if not ADMIN_URL.endswith('/'):
    ADMIN_URL += '/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# the schema location for Graphene
# https://docs.graphene-python.org/projects/django/en/latest/installation/
GRAPHENE = {
    "SCHEMA": "star.schema.schema",
    "ATOMIC_MUTATIONS": True,
    "MIDDLEWARE": [],
}
if DEBUG:
    GRAPHENE["MIDDLEWARE"].append("graphene_django.debug.DjangoDebugMiddleware")

ADMINS = CONFIG.get('DJANGO', 'ADMINS')
ADMINS = [tuple(ADMINS.split())]


EMAIL_SUBJECT_PREFIX = CONFIG.get('EMAIL', 'SUBJECT_PREFIX')
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_SSL = CONFIG.getboolean('EMAIL', 'USE_SSL')
EMAIL_HOST = CONFIG.get('EMAIL', 'HOST')
EMAIL_PORT = CONFIG.getint('EMAIL', 'PORT')
EMAIL_HOST_USER = CONFIG.get('EMAIL', 'USER')
EMAIL_HOST_PASSWORD = CONFIG.get('EMAIL', 'PASSWORD')
SERVER_EMAIL = DEFAULT_FROM_EMAIL = EMAIL_FROM = CONFIG.get('EMAIL', 'FROM')
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console_out': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose'
        },
        'console_err': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'stream': sys.stderr,
            'formatter': 'verbose'
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'null': {
            'class': 'logging.NullHandler',
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console_out'],
    },
    'loggers': {
        'django': {
            'handlers': ['console_out'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins', 'console_err'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console_out'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}
